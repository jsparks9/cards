[
  {
    "q": "<h3>\nWhat are \"props\"? What is state? What data should be put in which?\n</h3>",
    "a": "<ul>\n<li>\nProps are readonly; they are passed into the component\n</li>\n<li>\nState is the immutable object representing the current state of the component\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nWhat is React? Is it a library or framework? What's the difference between those?\n</h3>",
    "a": "<p>\nReact is a UI library. It's a library not a framework because you call it in your code; it can be integrated into part of or the entire UI\n</p>"
  },
  {
    "q": "<h3>\nWhy use React?\n</h3>",
    "a": "<ul>\n<li>\nWe use it to make single page front end applications\n</li>\n<li>\nLets us dynamically create and render components without having to refresh pages\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nWhat is the difference between React and ReactDOM?\n</h3>",
    "a": "<ul>\n<li>\nReact is a higher level package for both ReactDOM and React Native\n</li>\n<li>\nReactDOM is strictly the web implementation of React\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nHow many HTML pages does our React App use?\n</h3>",
    "a": "<ul>\n<li>\nWe render in one SINGLE page\n</li>\n<li>\nIt is constructed in a way that we only ever need to render one DOM object\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nWhat is SPA?\n</h3>",
    "a": "<p>\nSingle Page Application is a website design approach where each new page's content is served not from loading new HTML pages but generated dynamically with JS's ability to manipulate the DOM elements on the existing page itself\n</p>"
  },
  {
    "q": "<h3>\nWhat are some benefits of SPA?\n</h3>",
    "a": "<p>\nAllows users to continue consuming and interacting with the page while new elements are being updated or fetched, and can result in much faster interactions\n</p>"
  },
  {
    "q": "<h3>\nWhat are some downsides of SPA?\n</h3>",
    "a": "<ul>\n<li>\nAccessibility\n</li>\n<li>\nSEO rankings\n</li>\n<li>\nIf your content is purely static, it can worsen initial load times\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nWhat is the package.json?\n</h3>",
    "a": "<ul>\n<li>\nLists our dependencies\n</li>\n<li>\nLists our scripts (Start, test are aliases for npm run [script])\n</li>\n<li>\nRun the build script to show the target folder\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nWhat are node_modules?\n</h3>",
    "a": "<p>\nHouses our dependency files\n</p>"
  },
  {
    "q": "<h3>\nWhat is gitignore?\n</h3>",
    "a": "<p>\nAuto-generated by create-react-app to prevent us from pushing certain things to github repos\n</p>"
  },
  {
    "q": "<h3>\nWhat is the build folder?\n</h3>",
    "a": "<p>\nAfter running the command \"npm run build\" a folder called build is created with our self-container app\n</p>"
  },
  {
    "q": "<h3>\nWhat is react.createElement?\n</h3>",
    "a": "<p>\nreact.createElement(\"h1\", { style: { color: \"blue\" }}, \"Hello world from react\")\n</p>"
  },
  {
    "q": "<h3>\nWhat does it mean to be component-based? What does a component represent?\n</h3>",
    "a": "<p>\nComponents are reusable parts of the UI that maintain a state and get rendered to the page\n</p>"
  },
  {
    "q": "<h3>\nWhat is ReactDOM.render?\n</h3>",
    "a": "<p>\nReactDOM takes 2 arguments\n</p>\n<ul>\n<li>\nThe element to render\n</li>\n<li>\nThe location to add the element to in the DOM\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nWhat is the App.tsx? Why do we structure it in that way?\n</h3>",
    "a": "<ul>\n<li>\nMain entrypoint for our application\n</li>\n<li>\nThis is where we render the root node for the DOM object\n</li>\n<li>\n\"A lot\" of the time this is where we do our app routing\n</li>\n<li>\nIt's structured like this because easy to maintain and at the end of the day we only want one root for everything else\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nWhat are the roles of Babel and Webpack?\n</h3>",
    "a": "<p>\nBabel\n</p>\n<ul>\n<li>\nFree open source JS transpiler or transcompiler that will turn things like JSX and tsx into valid JS code\n</li>\n<li>\nMake sure to start all components with capital letter, this is how Babel knows its a component it has to transpile\n</li>\n</ul>\n\n<p>\nWebpack\n</p>\n<ul>\n<li>\nThis is a packaging tool that takes all the different files and modules and build them into a web package to use within the browser\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nTell me how you would start up a new React project? What does 'create react app' setup for you?\n</h3>",
    "a": "<p>\nrun \"npm run start\" after \"npm install\" to start the app. 'create react app' sets up the necessary components for React wherein we'll make files specific to our application. \n</p>"
  },
  {
    "q": "<h3>\nHow would you create a component?\n</h3>",
    "a": "<p>\nCreate either a JS class or function\n</p>"
  },
  {
    "q": "<h3>\nWhy use components?\n</h3>",
    "a": "<ul>\n<li>\nIncrease reuseability and maintainability\n</li>\n<li>\nAlso helps loosen code coupling within the application\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nWhat does a component have to render/return?\n</h3>",
    "a": "<ul>\n<li>\nA component must return/render a JSX view of some type\n</li>\n<li>\nThis view can only have one single root JSX tag\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nWhat is the lifecycle of a component?\n</h3>",
    "a": "<ul>\n<li>\nConstructor - use for initializing state\n</li>\n<li>\nrender() - returns the JSX to be compiled and rendered onto the browser\n</li>\n<li>\ncomponentDidMount() - runs once, after the component is rendered\n</li>\n<li>\ncomponentDidUpdate() - runs after every update of the component\n</li>\n<li>\ncomponentWillUnmount() - runs before the component is removed from the DOM\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nWhat is the difference between a function and a class component?\n</h3>",
    "a": "<ul>\n<li>\nFunction - before hooks, could not modify state and only used as 'display' component\n</li>\n<li>\nClass - utilizes lifecycle methods and render method\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nWhat are React hooks? How do we use them?\n</h3>",
    "a": "<ul>\n<li>\nReact hooks are functions we can call in order to access certain functionalites\n</li>\n<li>\nThey all start with use such as useStyle(), useState(), useEffect()\n</li>\n<li>\nWe call them hooks because they allow us to hook into certain aspects of a component whether it be style or lifecycle\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nWhat do these hooks let us do?\n</h3>",
    "a": "<ul dir=\"auto\">\n<li><code>useState()</code>\n<ul dir=\"auto\">\n<li>We can add <code>useState()</code> to our imports</li>\n<li><code>useState()</code> is a function that returns an array of the following\n<ul dir=\"auto\">\n<li>Index 0, we have the state object</li>\n<li>Index 1, we have the function to use to update that object state</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>useEffect()</code>\n<ul dir=\"auto\">\n<li>Allows us to manage side-effects that aren't related to rendering the component</li>\n<li>Typically actions such as logging or fetching data will utilize <code>useEffect()</code></li>\n<li>Takes in 2 params\n<ul dir=\"auto\">\n<li>A callback function denoting what action you want to perform</li>\n<li>A dependency array of state values that act as triggers for the action on change</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nHow do we save info in a component?\n</h3>",
    "a": "<ul>\n<li>\nTo save info we can use React component states\n</li>\n<li>\nIf we are using class components, we can set this initial state directly in the constructor\n</li>\n<li>\nIf we are using a function component, we can use the useState() hook to create and offer a method to change state\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nWhat is routing and how would you do routing in React?\n</h3>",
    "a": "<ul>\n<li>\nNeed to install react-router using npm\n</li>\n<li>\nnpm install react-router@next react-router-dom@next\n</li>\n<li>\nUse the BrowserRouter component to provide context where routing will work\n</li>\n<li>\nUse Navigate component to link to a particular route\n</li>\n<li>\nUse Routes and Route components to link routes to particular components that get rendered\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nWhat is JSX? What does it compile into? How to include JS code in JSX?\n</h3>",
    "a": "<ul>\n<li>\nJSX is an extension syntax to JS - it lets you write HTML and JS code together; compiles into JS\n</li>\n<li>\nNot required but helps with development\n</li>\n<li>\nWrite JS code by using curly braces {like this}\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nWhat are some of the differences between JSX HTML and normal HTML?\n</h3>",
    "a": "<ul dir=\"auto\">\n<li>Attribute names\n<ul dir=\"auto\">\n<li>Example class =&gt; className</li>\n<li>You can also create your own \"attributes\" which are called props</li>\n</ul>\n</li>\n<li>Tag names\n<ul dir=\"auto\">\n<li>HTML tag: <code>&lt;p&gt;</code></li>\n<li>Component tag: <code>&lt;SomeComponent&gt;</code></li>\n<li>We can directly add JS into JSX HTML by using { } where as in HTML you cannot do this</li>\n</ul>\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nHow do you handle events in React?\n</h3>",
    "a": "<ul>\n<li>\nUse event binding: &lt;button onClick={myClickHandler}&gt;&lt;/button&gt;\n</li>\n<li>\nFor sending parameters: &lt;button onClick={(e) =&gt; this.deleteRow(id, e)}&gt;Delete Row&lt;/button&gt;\n</li>\n<li>\nDefine myClickHandler function in your component somewhere\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nWhat is Data Binding?\n</h3>",
    "a": "<ul>\n<li>\nData binding is when we bind data to a specific value in the state\n</li>\n<li>\nFor example, if we had login form and we had a username input, we want to bind whatever the user types in, to the username value in the state\n</li>\n</ul>\n<p>\nconst [username, changeUsername] = useState(\"\")\n</p>\n<p>\nconst [password, changePassword] = useState(\"\")\n</p><p>\nconst handleUsernameChange = (e: React.ChangeEvent<HTMLInputElement>) => { changeUsername(e.target.value) }\n</p><p>\nconst handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => { changePassword(e.target.value) }\n</p>"
  },
  {
    "q": "<h3>\nDoes React have 1-way or 2-way data binding and data flow?\n</h3>",
    "a": "<ul>\n<li>\n1-way data binding\n</li>\n<li>\nData always flows \"down\" to components nested within them\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nIf a parent component has data that a child component needs to access, what should you do?\n</h3>",
    "a": "<p>\nPass in the data through props to the child\n</p>"
  },
  {
    "q": "<h3>\nIf you have state in two child components that a parent component needs access to, what is a good solution for that?\n</h3>",
    "a": "<p>\nLift the state up to the parent component and then pass it into each child via props\n</p>"
  },
  {
    "q": "<h3>How do you do conditional rendering?\n</h3>",
    "a": "<ul>\n<li>\nUse an if statement in the render() function OR\n</li>\n<li>\nUse a boolean value with logical && operator in your JSX like below\n</li>\n</ul>\n<p>\nrender() { return &lt;div&gt;{myBooleanValue && &lt;SomeComponent /&gt;}&lt;/div&gt; }\n</p>"
  },
  {
    "q": "<h3>\nWhat should you remember to include as a prop for lists of elements?\n</h3>",
    "a": "<ul>\n<li>\nPass in a key prop that uniquely identifies the list item\n</li>\n<li>\nHelps React know which items have changed, been added, or removed\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nHow do we use TypeScript in React?\n</h3>",
    "a": "<ul>\n<li>\nnpm install typescript\n</li>\n<li>\nnpx create-react-app my-app --template typescript\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nWhat are some pros/cons of using TypeScript in a React application?\n</h3>",
    "a": "<ul>\n<li>\nPros: strict type checking; intellisense; features like interfaces, decorators, and access modifiers\n</li>\n<li>\nCons: adds overhead and extra transpilation; may be unnecessary for small projects\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nHow would you handle forms and submitting forms with React?\n</h3>",
    "a": "<ul>\n<li>\nUse \"controlled components\" where the state of the form is based on the state of the React component\n</li>\n<li>\nNot recommended, but you can use uncontrolled component with a Ref to get form values from the DOM\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nHow do you recommend making an HTTP request in React? Which library have you used? Why not use fetch directly?\n</h3>",
    "a": "<ul>\n<li>\nCan use AJAX itself or fetch, but a library like Axios is a good idea b/c can centrally configure all requests\n</li>\n<li>\nExample: need to include JWT token with every request for authorization\n</li>\n</ul>"
  },
  {
    "q": "<h3>\nWhat are some options for styling your React components?\n</h3>",
    "a": "<ul>\n<li>\nPreferred: use the className prop\n</li>\n<li>\nOptional: use inline styling, or \"CSS-in-JS\" where the styling is defined in JS\n</li>\n</ul>"
  }
]