[
  {
    "q": "<h3>Can garbage collected be forced in Java?</h3>",
    "a": "<p>No, it cannot be forced. System.gc(); merely suggests to the JVM to collect garbage.</p>"
  },
  {
    "q": "<h3>Can exceptions be caught by multiple catch blocks in any order?</h3>",
    "a": "<p>Exceptions in catch blocks must be in order of increasing generality.</p>"
  },
  {
    "q": "<h3>Why do abstract classes have constructors?</h3>",
    "a": "<p>A subclass that inherits the abstract class will use the constructor.</p>"
  },
  {
    "q": "<h3>What is Java?</h3>",
    "a": "<p>Java is a general-purpose, class-based, object-oriented programming language designed for having lesser implementation dependencies.</p>\n<p>(<a target=\"_blank\" href=\"https://www.guru99.com/java-platform.html\">guru99.com</a>)</p>"
  },
  {
    "q": "<h3>In what way does Java employ abstraction?</h3>",
    "a": "<p>Abstraction refers to the quality of dealing with ideas rather than events. It basically deals with hiding the details and showing the essential things to the user. Thus you can say that abstraction in Java is the process of hiding the implementation details from the user and revealing only the functionality to them.</p>\n<p>(<a target=\"_blank\" href=\"https://www.edureka.co/blog/interview-questions/java-interview-questions/\">edureka.co</a>)</p>"
  },
  {
    "q": "<h3>In what way does Java employ polymorphism?</h3>",
    "a": "<p>Polymorphism is briefly described as “one interface, many implementations”. Polymorphism is a characteristic of being able to assign a different meaning or usage to something in different contexts.</p>\n<p>(<a target=\"_blank\" href=\"https://www.edureka.co/blog/interview-questions/java-interview-questions/\">edureka.co</a>)</p>"
  },
  {
    "q": "<h3>In what way does Java employ inheritance?</h3>",
    "a": "<p>Inheritance in Java is the concept where the properties of one class can be inherited by the other. It helps to reuse the code and establish a relationship between different classes.</p>\n<p>(<a target=\"_blank\" href=\"https://www.edureka.co/blog/interview-questions/java-interview-questions/\">edureka.co</a>)</p>"
  },
  {
    "q": "<h3>In what way does Java employ encapsulation?</h3>",
    "a": "<p>Encapsulation is a mechanism where you bind your data(variables) and code(methods) together as a single unit.</p>\n<p>(<a target=\"_blank\" href=\"https://www.edureka.co/blog/interview-questions/java-interview-questions/\">edureka.co</a>)</p>"
  },
  {
    "q": "<h3>Describe the JDK, JRE, and the JVM</h3>",
    "a": "<ul>\n<li>JDK\n<ul>\n<li>stands for Java Development Kit.</li>\n<li>It is the tool necessary to compile, document and package Java programs.</li>\n</li>\n</ul>\n<li>JRE\n<ul>\n<li>stands for Java Runtime Environment.</li>\n<li>JRE refers to a runtime environment in which Java bytecode can be executed.</li>\n</li>\n</ul>\n<li>JVM<ul>\n<li>It stands for Java Virtual Machine.</li>\n<li>It is an abstract machine. It is a specification that provides a run-time environment in which Java bytecode can be executed.</li>\n</li>\n</ul>\n</ul>"
  },
  {
    "q": "<h3>List the Java primitive types</h3>",
    "a": "<ul>\n<li>byte</li>\n<li>short</li>\n<li>int</li>\n<li>long</li>\n<li>float</li>\n<li>double</li>\n<li>boolean</li>\n<li>char</li>\n</ul>"
  },
  {
    "q": "<h3>What are wrapper classes?</h3>",
    "a": "<p>Wrapper classes convert the Java primitives into the reference types (objects).</p>\n<p>(<a target=\"_blank\" href=\"https://www.edureka.co/blog/interview-questions/java-interview-questions/\">edureka.co</a>)</p>"
  },
  {
    "q": "<h3>What is autoboxing and unboxing?</h3>",
    "a": "<p>Autoboxing is the automatic conversion that the Java compiler makes between the primitive types and their corresponding object wrapper classes.</p>\n<p>(<a target=\"_blank\" href=\"https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html\">docs.oracle.com</a>)</p>"
  },
  {
    "q": "<h3>What does the \"final\" keyword mean?</h3>",
    "a": "<p>final is a special keyword in Java that is used as a non-access modifier.</p>\n<p>When the final keyword is used with a variable then its value can’t be changed once assigned.</p>\n<p>When a method is declared final then it can’t be overridden by the inheriting class.</p>\n<p>When a class is declared as final in Java, it can’t be extended by any subclass class but it can extend other class.</p>\n<p>(<a target=\"_blank\" href=\"https://www.edureka.co/blog/interview-questions/java-interview-questions/\">edureka.co</a>)</p>"
  },
  {
    "q": "<h3>What does the \"static\" keyword mean?</h3>",
    "a": "<p>The static keyword belongs to the class than an instance of the class. The static keyword is used for a constant variable or a method that is the same for every instance of a class.</p>\n<p>Methods declared as static have several restrictions: </p>\n<ul>\n<li>They can only directly call other static methods.</li>\n<li>They can only directly access static data.</li>\n<li>They cannot refer to <span id=\"keyword\">this</span> or <span id=\"keyword\">super</span> in any way.</li>\n</ul>\n<p>(<a target=\"_blank\" href=\"https://www.geeksforgeeks.org/static-keyword-java/\">geeksforgeeks.org</a>)</p>"
  },
  {
    "q": "<h3>What are variable arguments?</h3>",
    "a": "<p>Variable Arguments (Varargs) in Java is a method that takes a variable number of arguments.</p>\n<p>public static void fun(int ... a) { //method body } takes any amount of integers as input.</p>\n<p>(<a target=\"_blank\" href=\"https://www.geeksforgeeks.org/variable-arguments-varargs-in-java/\">geeksforgeeks.org</a>)</p>"
  },
  {
    "q": "<h3>What are the scopes in which a variable can exist in - in Java?</h3>",
    "a": "<ul>\n<li>Class</li>\n<li>Instance</li>\n<li>Method</li>\n<li>Block</li>\n</ul>"
  },
  {
    "q": "<h3>What is the difference between an object and a class?</h3>",
    "a": "<p>A class is a template which includes a set of states and behaviors that will become the properties and\nmethods of objects that are instances of that class.</p>\n<p>(Source: Java Basics PPT slides)</p>"
  },
  {
    "q": "<h3>What is the \"new\" keyword used for?</h3>",
    "a": "<p>Instantiate an instance of a class.</p>"
  },
  {
    "q": "<h3>What is the \"super\" keyword used for?</h3>",
    "a": "<p>In Java, the super keyword is a reference variable that refers to an immediate parent class object.</p>\n<p>(<a target=\"_blank\" href=\"https://www.edureka.co/blog/interview-questions/java-interview-questions/\">edureka.co</a>)</p>"
  },
  {
    "q": "<h3>What is the \"this\" keyword used for?</h3>",
    "a": "<p>Refer to something in the class, such as a constructor or variable.</p>"
  },
  {
    "q": "<h3>What is a constructor?</h3>",
    "a": "<p>In Java, constructor refers to a block of code which is used to initialize an object.</p>\n<p>(<a target=\"_blank\" href=\"https://www.edureka.co/blog/interview-questions/java-interview-questions/\">edureka.co</a>)</p>"
  },
  {
    "q": "<h3>What is the difference between the == operator and .equals() method?</h3>",
    "a": "<p>Equals() method is defined in Object class in Java and used for checking equality of two objects defined by business logic.</p>\n<p>“==” or equality operator in Java is a binary operator provided by Java programming language and used to compare primitives and objects.</p>\n<p>(<a target=\"_blank\" href=\"https://www.edureka.co/blog/interview-questions/java-interview-questions/\">edureka.co</a>)</p>"
  },
  {
    "q": "<h3>What is the Object class's function in the Java language?</h3>",
    "a": "<p>The Object class is the parent class of all the classes in java by default. It provides some basic methods all objects can access.</p>\n<p>The Object class is beneficial if you want to refer any object whose type you don't know. Notice that parent class reference variable can refer the child class object, know as upcasting.</p>\n<p>(<a target=\"_blank\" href=\"https://www.javatpoint.com/object-class\">javatpoint.com</a>)</p>"
  },
  {
    "q": "<h3>What is a POJO?</h3>",
    "a": "<p>POJO in Java stands for Plain Old Java Object. It is an ordinary object, which is not bound by any special restriction.</p>\n<p>(<a target=\"_blank\" href=\"https://www.javatpoint.com/pojo-in-java\">javatpoint.com</a>)</p>"
  },
  {
    "q": "<h3>What is method overloading?</h3>",
    "a": "<p>Method Overloading is to “add” or “extend” more to the method’s behavior.</p>\n<p>Methods of the same class shares the same name but each method must have a different number of parameters or parameters having different types and order.</p>\n<p>(<a target=\"_blank\" href=\"https://www.edureka.co/blog/interview-questions/java-interview-questions/\">edureka.co</a>)</p>"
  },
  {
    "q": "<h3>What is method overriding?</h3>",
    "a": "<p>Method Overriding is to “Change” existing behavior of the method.</p>\n<p>The subclass has the same method with the same name and exactly the same number and type of parameters and same return type as a superclass.</p>\n<p>(<a target=\"_blank\" href=\"https://www.edureka.co/blog/interview-questions/java-interview-questions/\">edureka.co</a>)</p>"
  },
  {
    "q": "<h3>What is type casting?</h3>",
    "a": "<p>Type casting is when you assign a value of one primitive data type to another type.</p>\n<p>(<a target=\"_blank\" href=\"https://www.w3schools.com/java/java_type_casting.asp\">w3schools.com</a>)</p>"
  },
  {
    "q": "<h3>What are access modifiers?</h3>",
    "a": "<p>Access modifiers are special keywords which are used to restrict the access of a class, constructor, data member and method in another class. Java supports four types of access modifiers:</p>\n<ul>\n<li>Default (\"package private\")</li>\n<li>Private</li>\n<li>Protected</li>\n<li>Public</li>\n</ul>\n<table style=\"height: 352px;\" border=\"1px\" width=\"100%\"><tbody><tr style=\"height: 36px;\"><td style=\"width: 36.037%; height: 36px; padding: 5px;\"><span><strong>Modifier</strong></span></td><td style=\"width: 16.3244%; height: 36px; padding: 5px;\"><span><strong>Default</strong></span></td><td style=\"width: 16.3245%; height: 36px; padding: 5px;\"><span><strong>Private</strong></span></td><td style=\"width: 15.9138%; height: 36px; padding: 5px;\"><span><strong>Protected</strong></span></td><td style=\"width: 14.6817%; height: 36px; padding: 5px;\"><span><strong>Public</strong></span></td></tr><tr style=\"height: 30px;\"><td style=\"width: 36.037%; text-align: center; height: 30px; padding: 5px;\"><span><em>Same class</em></span></td><td style=\"width: 16.3244%; text-align: center; height: 30px; padding: 5px;\"><span>YES</span></td><td style=\"width: 16.3245%; text-align: center; height: 30px; padding: 5px;\"><span>YES</span></td><td style=\"width: 15.9138%; text-align: center; height: 30px; padding: 5px;\"><span>YES</span></td><td style=\"width: 14.6817%; text-align: center; height: 30px; padding: 5px;\"><span>YES</span></td></tr><tr style=\"height: 30px;\"><td style=\"width: 36.037%; text-align: center; height: 30px; padding: 5px;\"><span><em>Same Package subclass</em></span></td><td style=\"width: 16.3244%; text-align: center; height: 30px; padding: 5px;\"><span>YES</span></td><td style=\"width: 16.3245%; text-align: center; height: 30px; padding: 5px;\"><span>NO</span></td><td style=\"width: 15.9138%; text-align: center; height: 30px; padding: 5px;\"><span>YES</span></td><td style=\"width: 14.6817%; text-align: center; height: 30px; padding: 5px;\"><span>YES</span></td></tr><tr style=\"height: 30px;\"><td style=\"width: 36.037%; text-align: center; height: 30px; padding: 5px;\"><span><em>Same Package non-subclass</em></span></td><td style=\"width: 16.3244%; text-align: center; height: 30px; padding: 5px;\"><span>YES</span></td><td style=\"width: 16.3245%; text-align: center; height: 30px; padding: 5px;\"><span>NO</span></td><td style=\"width: 15.9138%; text-align: center; height: 30px; padding: 5px;\"><span>YES</span></td><td style=\"width: 14.6817%; text-align: center; height: 30px; padding: 5px;\"><span>YES</span></td></tr><tr style=\"height: 30px;\"><td style=\"width: 36.037%; text-align: center; height: 30px; padding: 5px;\"><span><em>Different package subclass</em></span></td><td style=\"width: 16.3244%; text-align: center; height: 30px; padding: 5px;\"><span>NO</span></td><td style=\"width: 16.3245%; text-align: center; height: 30px; padding: 5px;\"><span>NO</span></td><td style=\"width: 15.9138%; text-align: center; height: 30px; padding: 5px;\"><span>YES</span></td><td style=\"width: 14.6817%; text-align: center; height: 30px; padding: 5px;\"><span>YES</span></td></tr><tr style=\"height: 30px;\"><td style=\"width: 36.037%; text-align: center; height: 30px; padding: 5px;\"><span><em>Different package non-subclass</em></span></td><td style=\"width: 16.3244%; text-align: center; height: 30px; padding: 5px;\"><span>NO</span></td><td style=\"width: 16.3245%; text-align: center; height: 30px; padding: 5px;\"><span>NO</span></td><td style=\"width: 15.9138%; text-align: center; height: 30px; padding: 5px;\"><span>NO</span></td><td style=\"width: 14.6817%; text-align: center; height: 30px; padding: 5px;\"><span>YES</span></td></tr></tbody></table>\n\n<p>(<a target=\"_blank\" href=\"https://www.edureka.co/blog/interview-questions/java-interview-questions/\">edureka.co</a>)</p>"
  },
  {
    "q": "<h3>List the access modifiers from most visible to least visible</h3>",
    "a": "<ol>\n<li>Public</li>\n<li>Protected</li>\n<li>Default</li>\n<li>Private</li>\n</ol>"
  },
  {
    "q": "<h3>What is the difference in visibility between protected and package-private access level?</h3>",
    "a": "<p>Package-private is the <span id=\"keyword\">default</span> access modifier. It disallows access to subclasses from different packages while <span id=\"keyword\">protected</span> allows it.</p>"
  },
  {
    "q": "<h3>What are some non-access modifying keywords used in Java?</h3>",
    "a": "<ul>\n<li>static</li>\n<li>final</li>\n<li>abstract</li>\n<li>synchronized</li>\n<li>volatile</li>\n<li>transient</li>\n</ul>"
  },
  {
    "q": "<h3>What is the difference between an interface and an abstract class?</h3>",
    "a": "<p>An abstract class allows you to create functionality that subclasses can implement or override. An interface only allows you to define functionality, not implement it.</p>\n<p>(<a target=\"_blank\" href=\"https://www.infoworld.com/article/2928719/when-to-use-an-abstract-class-vs-interface-in-csharp.html\">infoworld.com</a>)</p>"
  },
  {
    "q": "<h3>Is multiple inheritance supported in Java?</h3>",
    "a": "<p>Multiple inheritance in Java is possible through interfaces. A class can implement multiple interfaces.</p>\n<p><span id=\"keyword\">public</span> <span id=\"keyword\">class</span> my_class_name <span id=\"keyword\">implements</span> class1,class2,class3 {...}</p>"
  },
  {
    "q": "<h3>What are packages used for?</h3>",
    "a": "<p>Packages in Java, are the collection of related classes and interfaces which are bundled together. By using packages, developers can easily modularize the code and optimize its reuse. Also, the code within the packages can be imported by other classes and reused.</p>\n<ul>\n<li>Packages help in avoiding name clashes</li>\n<li>They provide easier access control on the code</li>\n<li>Packages can also contain hidden classes which are not visible to the outer classes and only used within the package</li>\n<li>Creates a proper hierarchical structure which makes it easier to locate the related classes</li>\n</ul>\n<p>(<a target=\"_blank\" href=\"https://www.edureka.co/blog/interview-questions/java-interview-questions/\">edureka.co</a>)</p>"
  },
  {
    "q": "<h3>What are imports?</h3>",
    "a": "<p>Imprts allow access to a package, class, or interface specified in the import statement.</p>\n<p>java.lang is automatically imported.</p>"
  },
  {
    "q": "<h3>What are static imports?</h3>",
    "a": "<p>The static import construct allows unqualified access to static members without inheriting from the type containing the static members. Instead, the program imports the members, either individually:</p>\n<ul><li>import static java.lang.Math.PI;</li></ul>\n<p>or en masse:</p>\n<ul><li>import static java.lang.Math.*;</li></ul>\n<p>Once the static members have been imported, they may be used without qualification:</p>\n<ul><li>double r = cos(PI * theta);</li></ul>\n<p>(<a target=\"_blank\" href=\"https://docs.oracle.com/javase/7/docs/technotes/guides/language/static-import.html\">docs.oracle.com</a>)</p>"
  },
  {
    "q": "<h3>What is the main method signature?</h3>",
    "a": "<p>public static void main(String[] args) { }</p>"
  },
  {
    "q": "<h3>What is an array?</h3>",
    "a": "<p>An array is a container object that holds a fixed number of values of a single type.</p>\n<p>(<a target=\"_blank\" href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html\">docs.oracle.com</a>)</p>"
  },
  {
    "q": "<h3>What property of a Java primitive array tells us the size of the array?</h3>",
    "a": "<p>array_name.length</p>"
  },
  {
    "q": "<h3>Does Java employ \"pass-by-value\" or \"pass-by-reference\"?</h3>",
    "a": "<p>Java employs pass-by-value. However, since the value passed is a pointer to the location of the object, it's practically pass-by-reference.</p>"
  },
  {
    "q": "<h3>What are some constructs used in Java for flow control?</h3>",
    "a": "<ul>\n<li>if</li>\n<li>if-else</li>\n<li>if-else-if</li>\n<li>nested IF</li>\n<li>switch</li>\n<li>for-loops</li>\n<li>while and do-while loops</li>\n<li>branching statements</li>\n</ul>"
  },
  {
    "q": "<h3>What is the difference between a while and a do-while loop?</h3>",
    "a": "<p>A do-while loop will execute at least once then check the condition. A while loop checks the condition first and will not do anything if the condition is false.</p>"
  },
  {
    "q": "<h3>What is the difference between a for loop and an enhanced for loop?</h3>",
    "a": "<p>A normal for-loop can iterate in decrement or increment order. An enhanced for-loop can iterate only in increment order.</p>\n<p>(<a target=\"_blank\" href=\"https://www.geeksforgeeks.org/difference-between-for-loop-and-enhanced-for-loop-in-java/\">geeksforgeeks.org</a>)</p>"
  },
  {
    "q": "<h3>What are short-circuit boolean operators?</h3>",
    "a": "<p>In a statement like (c1&nbsp;||&nbsp;c2), c2 is not evaluated if c1 is true. In (c1&nbsp;&&&nbsp;c2), c2 will not evaluate if c1 is false.</p>"
  },
  {
    "q": "<h3>What is the String Pool?</h3>",
    "a": "<p>String Pool in Java is a pool of Strings which is stored in Java Heap Memory.</p>\n<p>Each time a string literal is created, the JVM checks the string literal pool first. If the string already exists in the string pool, a reference to the pooled instance returns. If the string does not exist in the pool, a new String object initializes and is placed in the pool.</p>\n<p>(<a target=\"_blank\" href=\"https://www.edureka.co/blog/java-string-pool/\">edureka.co</a>)</p>"
  },
  {
    "q": "<h3>What is the difference between String, StringBuilder, and StringBuffer?</h3>",
    "a": "<ul>\n<li>String is immutable whereas StringBuffer and StringBuilder are mutable classes.</li>\n<li>StringBuffer is thread-safe and synchronized whereas StringBuilder is not. That’s why StringBuilder is faster than StringBuffer.</li>\n<li>String concatenation operator (+) internally uses StringBuffer or StringBuilder class</li>\n<li>For String manipulations in a non-multi threaded environment, we should use StringBuilder else use StringBuffer class.</li>\n</ul>\n<p>(<a target=\"_blank\" href=\"https://www.journaldev.com/538/string-vs-stringbuffer-vs-stringbuilder\">journaldev.com</a>)</p>"
  },
  {
    "q": "<h3>Are Java Strings thread-safe? Why?</h3>",
    "a": "<p>Java String is thread-safe because it is immutable.</p>\n<p>One important point to note is that even if String is immutable thus thread safe, reference to the String object is not thread safe.</p>\n<p>(<a target=\"_blank\" href=\"https://knpcode.com/java/java-basics/is-java-string-thread-safe/\">knpcode.com</a>)</p>"
  },
  {
    "q": "<h3>How can a String be created outside of the String Pool?</h3>",
    "a": "<p>String s3 = new String(\"Hello\");</p>"
  },
  {
    "q": "<h3>What is string interning?</h3>",
    "a": "<p>String Interning is a method of storing only one copy of each distinct String Value, which must be immutable.</p>\n<p>Strings are interned in the string pool.</p>\n<p>(<a target=\"_blank\" href=\"https://www.geeksforgeeks.org/interning-of-string/\">geeksforgeeks.org</a>)</p>"
  },
  {
    "q": "<h3>What is the difference between an exception and an error in Java?</h3>",
    "a": "<p>Exceptions and errors both are subclasses of Throwable class. The error indicates a problem that mainly occurs due to the lack of system resources and our application should not catch these types of problems.</p>\n<p>Exceptions are the problems which can occur at runtime and compile time.</p>\n<p>(<a target=\"_blank\" href=\"https://www.tutorialspoint.com/difference-between-exception-and-error-in-java\">tutorialspoint.com</a>)</p>\n<img src=\"https://raw.githubusercontent.com/jsparks9/cards/main/images/Exception-in-java1.png\" alt=\"exceptions in Java flowchart\">\n<p>(<a target=\"_blank\" href=\"https://www.geeksforgeeks.org/checked-vs-unchecked-exceptions-in-java/\">geeksforgeeks.org</a>)</p>"
  },
  {
    "q": "<h3>What is the difference between a checked and an unchecked exception?</h3>",
    "a": "<p>Checked exceptions are thrown at compile time; unchecked are runtime exceptions.</p>\n<img src=\"https://raw.githubusercontent.com/jsparks9/cards/main/images/Exception-in-java1.png\" alt=\"exceptions in Java flowchart\">\n<p>(<a target=\"_blank\" href=\"https://www.geeksforgeeks.org/checked-vs-unchecked-exceptions-in-java/\">geeksforgeeks.org</a>)</p>"
  },
  {
    "q": "<h3>What causes a NullPointerException?</h3>",
    "a": "<p>NullPointerException is thrown when program attempts to use an object reference that has the null value.</p>\n<p>(<a target=\"_blank\" href=\"https://www.geeksforgeeks.org/null-pointer-exception-in-java/\">geeksforgeeks.org</a>)</p>"
  },
  {
    "q": "<h3>How can exceptions be handled in Java?</h3>",
    "a": "<p>With a try-catch block.</p>"
  },
  {
    "q": "<h3>What is the purpose of the finally block?</h3>",
    "a": "<p>The <span id=\"keyword\">finally</span> block runs regardless of whether an exception is thrown or caught.</p>\n<p>It will not run if program crashes or if the try block is an infinite loop.</p>"
  },
  {
    "q": "<h3>Are you required to handle RuntimeExceptions?</h3>",
    "a": "<p>No</p>"
  },
  {
    "q": "<h3>What modifying keywords are implicitly applied to variable members declared within an interface?</h3>",
    "a": "<p>All abstract, default, and static methods in an interface are implicitly public, so you can omit the public modifier. All constant values defined in an interface are implicitly public, static, and final. Once again, you can omit these modifiers.</p>\n<p>(<a target=\"_blank\" href=\"https://docs.oracle.com/javase/tutorial/java/IandI/interfaceDef.html\">docs.oracle.com</a>)</p>"
  },
  {
    "q": "<h3>What are functional interfaces?</h3>",
    "a": "<p>A functional interface is an interface that contains only one abstract method.</p>\n<p>(<a target=\"_blank\" href=\"https://www.geeksforgeeks.org/functional-interfaces-java/\">geeksforgeeks.org</a>)</p>"
  },
  {
    "q": "<h3>What are marker interfaces?</h3>",
    "a": "<p>It is an empty interface (no field or methods). Examples of marker interface are Serializable, Cloneable and Remote interface. All these interfaces are empty interfaces. </p>\n<p>(<a target=\"_blank\" href=\"https://www.geeksforgeeks.org/functional-interfaces-java/\">geeksforgeeks.org</a>)</p>"
  },
  {
    "q": "<h3>What are annotations used for in Java?</h3>",
    "a": "<p>Annotations in Java provide metadata about the program.</p>"
  },
  {
    "q": "<h3>What are default interface methods?</h3>",
    "a": "<p>Methods can be implemented in Interfaces using the syntax</p>\n<p><span id=\"keyword\">default</span> method_name(Object[] any_signature) { //any code }</p>\n<p>Methods that implement the interface are not required to override this method.</p>"
  },
  {
    "q": "<h3>What is the difference between an array and a linked list?</h3>",
    "a": "<p>Elements in an array can be accessed by index, but inserting elements requires creating a new array. Linked list elements can only be accessed by iterating through the elements, but adding or removing elements is near-instant.</p>\n<p>Why is this so?</p>"
  }
]